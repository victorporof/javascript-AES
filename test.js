/*global console, AES */

(function() {
  "use strict";

  console.log(AES.subBytes(
    [[0x19, 0x3d, 0xe3, 0xbe],
     [0xa0, 0xf4, 0xe2, 0x2b],
     [0x9a, 0xc6, 0x8d, 0x2a],
     [0xe9, 0xf8, 0x48, 0x08]].log()).is(

    [[0xd4, 0x27, 0x11, 0xae],
     [0xe0, 0xbf, 0x98, 0xf1],
     [0xb8, 0xb4, 0x5d, 0xe5],
     [0x1e, 0x41, 0x52, 0x30]].log()) + " subBytes()\n\n");

  console.log(AES.invSubBytes(
    [[0xd4, 0x27, 0x11, 0xae],
     [0xe0, 0xbf, 0x98, 0xf1],
     [0xb8, 0xb4, 0x5d, 0xe5],
     [0x1e, 0x41, 0x52, 0x30]].log()).is(

    [[0x19, 0x3d, 0xe3, 0xbe],
     [0xa0, 0xf4, 0xe2, 0x2b],
     [0x9a, 0xc6, 0x8d, 0x2a],
     [0xe9, 0xf8, 0x48, 0x08]].log()) + " invSubBytes()\n\n");

  console.log(AES.shiftRows(
    [[0xd4, 0x27, 0x11, 0xae],
     [0xe0, 0xbf, 0x98, 0xf1],
     [0xb8, 0xb4, 0x5d, 0xe5],
     [0x1e, 0x41, 0x52, 0x30]].log()).is(

    [[0xd4, 0xbf, 0x5d, 0x30],
     [0xe0, 0xb4, 0x52, 0xae],
     [0xb8, 0x41, 0x11, 0xf1],
     [0x1e, 0x27, 0x98, 0xe5]].log()) + " shiftRows()\n\n");

  console.log(AES.invShiftRows(
    [[0xd4, 0xbf, 0x5d, 0x30],
     [0xe0, 0xb4, 0x52, 0xae],
     [0xb8, 0x41, 0x11, 0xf1],
     [0x1e, 0x27, 0x98, 0xe5]].log()).is(

    [[0xd4, 0x27, 0x11, 0xae],
     [0xe0, 0xbf, 0x98, 0xf1],
     [0xb8, 0xb4, 0x5d, 0xe5],
     [0x1e, 0x41, 0x52, 0x30]].log()) + " invShiftRows()\n\n");

  console.log(AES.mixColumns(
    [[0xd4, 0xbf, 0x5d, 0x30],
     [0xe0, 0xb4, 0x52, 0xae],
     [0xb8, 0x41, 0x11, 0xf1],
     [0x1e, 0x27, 0x98, 0xe5]].log()).is(

    [[0x04, 0x66, 0x81, 0xe5],
     [0xe0, 0xcb, 0x19, 0x9a],
     [0x48, 0xf8, 0xd3, 0x7a],
     [0x28, 0x06, 0x26, 0x4c]].log()) + " mixColumns()\n\n");

  console.log(AES.invMixColumns(
    [[0x04, 0x66, 0x81, 0xe5],
     [0xe0, 0xcb, 0x19, 0x9a],
     [0x48, 0xf8, 0xd3, 0x7a],
     [0x28, 0x06, 0x26, 0x4c]].log()).is(

    [[0xd4, 0xbf, 0x5d, 0x30],
     [0xe0, 0xb4, 0x52, 0xae],
     [0xb8, 0x41, 0x11, 0xf1],
     [0x1e, 0x27, 0x98, 0xe5]].log()) + " invMixColumns()\n\n");

  console.log(AES.addRoundKey(
    [[0x04, 0x66, 0x81, 0xe5],
     [0xe0, 0xcb, 0x19, 0x9a],
     [0x48, 0xf8, 0xd3, 0x7a],
     [0x28, 0x06, 0x26, 0x4c]].log(),

    [[0xa0, 0xfa, 0xfe, 0x17],
     [0x88, 0x54, 0x2c, 0xb1],
     [0x23, 0xa3, 0x39, 0x39],
     [0x2a, 0x6c, 0x76, 0x05]].log(), 0).is(

    [[0xa4, 0x9c, 0x7f, 0xf2],
     [0x68, 0x9f, 0x35, 0x2b],
     [0x6b, 0x5b, 0xea, 0x43],
     [0x02, 0x6a, 0x50, 0x49]].log()) + " addRoundKey()\n\n");

  console.log(AES.rotWord(
    [0x09, 0xcf, 0x4f, 0x3c].log()).is(
    [0xcf, 0x4f, 0x3c, 0x09].log()) + " rotWord()\n\n");

  console.log(AES.subWord(
    [0xcf, 0x4f, 0x3c, 0x09].log()).is(
    [0x8a, 0x84, 0xeb, 0x01].log()) + " subWord\n\n");

  (function() {
    const key = [
      0x2b, 0x7e, 0x15, 0x16,
      0x28, 0xae, 0xd2, 0xa6,
      0xab, 0xf7, 0x15, 0x88,
      0x09, 0xcf, 0x4f, 0x3c];

    const input = [
      0x32, 0x43, 0xf6, 0xa8,
      0x88, 0x5a, 0x30, 0x8d,
      0x31, 0x31, 0x98, 0xa2,
      0xe0, 0x37, 0x07, 0x34];

    console.log("input: " + input.hex());
    console.log("key: " + key.hex());
    console.log("key expansion: " + AES.keyExpansion(key).hex() + "\n\n");

    var output = [];

    console.log("\noutput: " + AES.cipher(input, output, AES.keyExpansion(key)).hex() + "\n\n\n");
    console.log("\ninverse: " + AES.invCipher(output, [], AES.keyExpansion(key)).hex());
    console.log("original: " + input.hex() + "\n\n\n");
  })();
})();
